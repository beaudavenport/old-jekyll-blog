<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

 <title>Beau Davenport</title>
 <link href="http://beaudavenport.github.io/atom.xml" rel="self"/>
 <link href="http://beaudavenport.github.io/"/>
 <updated>2015-01-29T04:29:53+00:00</updated>
 <id>http://beaudavenport.github.io</id>
 <author>
   <name>Beau Davenport</name>
   <email>davenportbeau@gmail.com</email>
 </author>

 
 <entry>
   <title>New Beginnings</title>
   <link href="http://beaudavenport.github.io//2015/01/28/new-portfolio/"/>
   <updated>2015-01-28T00:00:00+00:00</updated>
   <id>http://beaudavenport.github.io/2015/01/28/new-portfolio</id>
   <content type="html">&lt;p&gt;After spending some time getting my feet wet with &lt;a href=&quot;http://jekyllrb.com/&quot;&gt;Jekyll&lt;/a&gt;, I’m happy to introduce my new 
portfolio/blog website.  I first heard about Jekyll through &lt;a href=&quot;https://pages.github.com/&quot;&gt;Github pages&lt;/a&gt;, which I had already
been using (very happily) for my original portfolio site.  There was a little bit of a learning
curve initially, but the more I played around with Jekyll, the more fun I had with it- and the
more potential I saw for future projects.&lt;/p&gt;

&lt;p&gt;For the new site, I began with &lt;a href=&quot;http://getpoole.com&quot;&gt;Poole&lt;/a&gt;, which offers an excellent starting 
point and includes most of the necessary boilerplate. Instead of using bootstrap, I took
inspiration from the Poole theme &lt;a href=&quot;http://hyde.getpoole.com/&quot;&gt;Hyde&lt;/a&gt; and used a few basic
breakpoints for responsive elements.  I also utilized several SASS mixins for sidebar buttons.&lt;/p&gt;

&lt;p&gt;The most exciting change for me was the use of jekyll’s &lt;code&gt;collections&lt;/code&gt;.
In my previous site, any new projects were hard-coded with HTML.&lt;/p&gt;

&lt;div class=&quot;post-image&quot;&gt;
    &lt;img src=&quot;public/images/old-portfolio.png&quot; /&gt;
    &lt;p class=&quot;image-caption&quot;&gt;My previous portfolio site&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;I took advantage of the Liquid templating engine used by Jekyll to create a much DRYer 
approach to my portfolio. I created a collection of “projects”, which are simply markdown files 
(much like this blog post) where I add &lt;a href=&quot;http://jekyllrb.com/docs/frontmatter&quot;&gt;Front Matter&lt;/a&gt; variables at the top of the file. Besides
the usual &lt;em&gt;title&lt;/em&gt; variable, I specify two additional variables- one for each of my project screenshot urls:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;---
title: Inventory Helper
mobile_url: public/images/inventory-mobile.png
full_url: public/images/inventory-full.png
---
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The “mobile_url” and “full_url” are then available as variables in my &lt;code&gt;portfolio.html&lt;/code&gt;,
thanks to the Liquid Templating. I loop through all of the projects in my 
&lt;code&gt;_projects&lt;/code&gt; folder, wherein I include the images using these variables. 
I also added a “toggle” button under the automatically loaded
images that switches between the mobile and full-screen screenshots. Visit my 
&lt;a href=&quot;portfolio&quot;&gt;portolio page&lt;/a&gt; to see it in action.&lt;/p&gt;

&lt;p&gt;All in all, I’m excited to be using Jekyll now for my portfolio.
I’ll be posting more about javascript, ruby, and front-end development, so check back soon. 
Visit my &lt;a href=&quot;portfolio&quot;&gt;portolio&lt;/a&gt; and my &lt;a href=&quot;about&quot;&gt;about page&lt;/a&gt; to
learn more about me and see examples of my work!&lt;/p&gt;

&lt;p&gt;Cheers!&lt;/p&gt;
</content>
 </entry>
 

</feed>
